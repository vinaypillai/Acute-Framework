$max-grid-col:12;
$grid-types: "xs","sm","md","lg";
$grid-breakpoints: "576px","768px","992px","1200px";

/*General Grid and Col styles*/
@mixin grid{
    display:flex;
    margin:0;
    padding:0;
    box-sizing:border-box;
    width:100%;
    flex-wrap:wrap;
    align-items: var(--align-v);
    justify-content: var(--align-h);
}
@mixin col{
    display:inline-block;
    box-sizing:border-box;
}
/*Grid specific col styles*/
/*Default Grid*/
@for $i from 1 through $max-grid-col {
    $current-grid-col: $i;
    $unit-col-width: 100% / $i;
    .grid-#{$i}{
        @include grid;
        --current-grid-col: #{$current-grid-col};
        --unit-col-width: #{$unit-col-width};
    }
}
@for $i from 1 through $max-grid-col {
    $current-grid-col: $i;
    $unit-col-width: 100% / $i;
    @for $j from 1 through $current-grid-col {
        .grid-#{$i}>.col-#{$j}{
            @include col;
            width: $unit-col-width * $j;
        }
        .grid-#{$i}>.col-offset-#{$j}{
            margin-left: $unit-col-width * $j;
        }
    }
}
/*Breakpoint Grids*/
@each $type in $grid-types{
    @media screen and (min-width: #{unquote(nth($grid-breakpoints, index($grid-types, $type)))}){ 
        @for $i from 1 through $max-grid-col {
            $current-grid-col: $i;
            $unit-col-width: 100% / $i;
            .grid-#{unquote($type)}-#{$i}{
                @include grid;
                --current-grid-col: #{$current-grid-col};
                --unit-col-width: #{$unit-col-width};
            }
        }
        @for $i from 1 through $max-grid-col {
            $current-grid-col: $i;
            $unit-col-width: 100% / $i;
            @for $j from 1 through $current-grid-col {
                /*Default grid/Breakpoint column*/
                .grid-#{$i}>.col-#{unquote($type)}-#{$j}{
                    @include col;
                    width: $unit-col-width * $j;
                }
                .grid-#{$i}>.col-offset-#{unquote($type)}-#{$j}{
                    margin-left: $unit-col-width * $j;
                }
            }
        }
        @for $i from 1 through $max-grid-col {
            $current-grid-col: $i;
            $unit-col-width: 100% / $i;
            @for $k from 1 through $current-grid-col {
                /*Breakpoint grid/Default Coulunb*/
                .grid-#{unquote($type)}-#{$i}>.col-#{$k}{
                    @include col;
                    width: $unit-col-width * $k;
                }
                .grid-#{unquote($type)}-#{$i}>.col-offset-#{$k}{
                    margin-left: $unit-col-width * $k;
                }
            }
        }
        @for $i from 1 through $max-grid-col {
            $current-grid-col: $i;
            $unit-col-width: 100% / $i;
            @for $m from 1 through $current-grid-col {
                @each $col-type in $grid-types{
                    /*Breakpoint-grid/Breakpoint Column*/
                    .grid-#{unquote($type)}-#{$i}>.col-#{unquote($col-type)}-#{$m}{
                        @include col;
                        width: $unit-col-width * $m;
                    }
                    .grid-#{unquote($type)}-#{$i}>.col-offset-#{unquote($col-type)}-#{$m}{
                        margin-left: $unit-col-width * $m;
                    }
                }
            }
        }
    }
}
